name: CI

# Define los eventos que activan el workflow
on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [main] # Ajusté a "main" únicamente, cambia si usas "master"

# Define los trabajos
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: "18.x" # Compatible con Next.js
          cache: "npm"
      - run: npm ci
      - run: npm run lint
        # Ejecuta "eslint . --ext .ts,.tsx" según tu package.json

  type-check:
    runs-on: ubuntu-latest
    needs: lint # Solo corre si lint pasa
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: "18.x"
          cache: "npm"
      - run: npm ci
      - run: npm run type-check
        # Ejecuta "tsc --noEmit" para verificar tipos de TypeScript

  test:
    runs-on: ubuntu-latest
    needs: type-check # Solo corre si type-check pasa
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: "18.x"
          cache: "npm"
      - run: npm ci
      - run: npm test
        # Ejecuta "jest" para pruebas unitarias (asegúrate de que Jest esté configurado)

  build:
    runs-on: ubuntu-latest
    needs: test # Solo corre si test pasa
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: "18.x"
          cache: "npm"
      - run: npm ci
      - run: npm run build
        # Ejecuta "next build" para construir la app Next.js
      # Opcional: podrías añadir un paso para verificar el build, pero Next.js no se inicia como servidor por defecto sin "start"

  notify:
    runs-on: ubuntu-latest
    needs: [lint, type-check, test, build]
    if: failure() # Solo se ejecuta si alguno de los jobs falla
    steps:
      - run: echo "CI pipeline failed! Check the logs for details."
